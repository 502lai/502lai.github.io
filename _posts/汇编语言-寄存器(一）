
# 溢出
mov ax,ax
溢出舍去

# 8086CPU给出物理地址的方法
8086有20位地址总线，可传送20位地址，寻址能力为1M
8086内部为16位结构，它只能传送16位的地址，表现出的寻址能力却只有64K。
8086CPU采用一种在内部用两个16位地址合成的方法来形成一个20位的物理地址
地址加法器合成物理地址的方法：
         物理地址=段地址×16+偏移地址

错误认识：
内存被划分成了一个一个的段，每一个段有一个段地址。

其实：
内存并没有分段，段的划分来自于CPU，由于8086CPU用“（段地址×16）+偏移地址=物理地址”的方式给出内存单元的物理地址，使得我们可以用分段的方式来管理内存。

CPU可以用不同的段地址和偏移地址形成同一个物理地址。



# 段寄存器
CS和IP是8086CPU中最关键的寄存器，它们指示了CPU当前要读取指令的地址。
   CS为代码段寄存器；
   IP为指令指针寄存器


# 地址存储方式
例子 ：0123H
地位   23H
|	   01H
|
高位


# 8086PC工作过程的简要描述
在 8086CPU 加电启动或复位后（ 即 CPU刚开始工作时）CS和IP被设置为CS=FFFFH，IP=0000H，即在8086PC机刚启动时，CPU从内存FFFF0H单元中读取指令执行（IP指向内存单元读取指令，读取的指令进入指令缓冲器），FFFF0H单元中的指令是8086PC机开机后执行的第一条指令。

IP = IP + 所读取指令的长度，从而指向下一条指令；


CPU在工作的时候把有的信息看作指令，有的信息看作数据。CPU根据什么将内存中的信息看作指令？
   CPU将CS:IP指向的内存单元中的内容看作指令。


# 我们如何改变CS、IP的值呢？
CPU从何处执行指令是由CS、IP中的内容决定的，程序员可以通过改变CS、IP中的内容来控制CPU执行目标指令。
## 8086CPU为CS、IP提供了另外的指令来改变它们的值：转移指令
同时修改CS、IP的内容：
	jmp 段地址：偏移地址
		jmp 2AE3:3
		jmp 3:0B16
	功能：用指令中给出的段地址修改CS，偏移地址修改IP。

仅修改IP的内容：
	jmp 某一合法寄存器
		jmp ax   （类似于 mov IP,ax）
		jmp bx
	功能：用寄存器中的值修改IP



# 代码段
对于8086PC机，在编程时，可以根据需要，将一组内存单元定义为一个段。
可以将长度为 N（ N≤64KB ）的一组代码，存在一组地址连续、起始地址为 16的倍数的内存单元中，这段内存是用来存放代码的，从而定义了一个代码段。

## 如何使得代码段中的指令被执行呢？
将一段内存当作代码段，仅仅是我们在编程时的一种安排，CPU 并不会由于这种安排，就自动地将我们定义得代码段中的指令当作指令来执行。

## jmp ax 会修改多少次IP?
2次
第一次在读取完 jmp ax后
第二次在执行完 jmp ax后


# Debug使用

Debug是DOS、Windows都提供的实模式（8086方式）程序的调试工具。
可以查看CPU各种寄存器的内容、内存的情况和在机器码级跟踪程序的运行。

## Debug功能
R命令查看、改变CPU寄存器内容   r、r ax
D命令查看内存内容				d 0001:0
E改写内存内容					e 0001:0 12 34 56 78 12 34 56 78（一次性修改）  e 0001:0（询问式修改）
U将内存中的机器指令翻译成汇编指令  u 0001:0 (lf)   lf表示查看的范围
T执行一条机器指令
A以汇编命令格式在内存中写入一条机器指令 a 0001:0	


## Debug安装
Win7 64位的孩子你们伤不起啊，木有debug
好在现在寻到一个方法，不用装虚拟机，废话不多说，上教程。
第一步，下载要用到的工具，
安装文件夹中的 DOSbox程序。
第二步，双击DOSbox安装
第三步，把Debug.exe拷贝到D盘或者E盘或者F盘根目录下（没有试过C盘），记住，是根目录，这里我以放在D盘为例。
第四步，打开安装好的DOSBox,看到如图界面：
然后输入
mount c d:\   回车 
出现Device C is mounted ….继续
c：        回车
debug       回车
之后你会看到下一行光标闪动，前面有一个小横杠，没错！你成功了！
输入p试试：

## ROM不能改写